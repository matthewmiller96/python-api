# ============================================================================
# UNIFIED DOCKER BUILD - Frontend + Backend + Nginx
# This replaces: Dockerfile, Dockerfile.all-in-one, frontend/Dockerfile
# ============================================================================

# --------------------------------
# Stage 1: Frontend Build
# --------------------------------
FROM node:18-alpine AS frontend-builder

WORKDIR /frontend
COPY frontend/package*.json ./
RUN npm ci

COPY frontend/ ./
RUN npm run build

# --------------------------------  
# Stage 2: Backend Build
# --------------------------------
FROM python:3.11-alpine AS backend-builder

# Install build dependencies
RUN apk add --no-cache build-base curl

# Install uv for fast Python package management
RUN curl -Ls https://astral.sh/uv/install.sh | sh && \
    mv ~/.local/bin/uv /usr/local/bin/

WORKDIR /backend
COPY requirements.txt .
RUN uv pip install --system -r requirements.txt

# --------------------------------
# Stage 3: Production Runtime  
# --------------------------------
FROM python:3.11-alpine AS production

# Install nginx and runtime dependencies
RUN apk add --no-cache nginx supervisor curl

# Copy Python packages from builder
COPY --from=backend-builder /usr/local/lib/python3.11/site-packages/ /usr/local/lib/python3.11/site-packages/
COPY --from=backend-builder /usr/local/bin/ /usr/local/bin/

# Copy application code
COPY app/ /app/
WORKDIR /app

# Copy frontend build
COPY --from=frontend-builder /frontend/build /usr/share/nginx/html

# Create nginx config directory and configure Nginx for SPA + API proxy
RUN mkdir -p /etc/nginx/http.d
COPY <<EOF /etc/nginx/http.d/default.conf
server {
    listen 80;
    server_name localhost;
    
    # Frontend - Single Page Application
    location / {
        root /usr/share/nginx/html;
        index index.html;
        try_files \$uri \$uri/ /index.html;
    }
    
    # API proxy
    location /api/ {
        proxy_pass http://127.0.0.1:8000/;
        proxy_set_header Host \$host;
        proxy_set_header X-Real-IP \$remote_addr;
        proxy_set_header X-Forwarded-For \$proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto \$scheme;
        proxy_buffering off;
    }
    
    # Health check
    location /health {
        proxy_pass http://127.0.0.1:8000/health;
    }
}
EOF

# Configure Supervisor to run both Nginx and FastAPI
COPY <<EOF /etc/supervisord.conf
[supervisord]
nodaemon=true
user=root

[program:nginx]
command=nginx -g "daemon off;"
autostart=true
autorestart=true
stderr_logfile=/var/log/nginx_err.log
stdout_logfile=/var/log/nginx_out.log

[program:fastapi]
command=/usr/local/bin/uvicorn app.main:app --host 127.0.0.1 --port 8000
directory=/
autostart=true
autorestart=true
stderr_logfile=/var/log/fastapi_err.log
stdout_logfile=/var/log/fastapi_out.log
EOF

# Expose port
EXPOSE 80

# Health check
HEALTHCHECK --interval=30s --timeout=10s --start-period=5s --retries=3 \
    CMD curl -f http://localhost/health || exit 1

# Start supervisor
CMD ["supervisord", "-c", "/etc/supervisord.conf"]
